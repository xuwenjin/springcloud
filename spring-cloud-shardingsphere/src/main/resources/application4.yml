# 分库 + 分表(多表)
server:
  port: 18093
spring:
  application:
    name: spring-cloud-shardingsphere
  main:
    allow-bean-definition-overriding: true
  jpa:
    open-in-view: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate.dialect: org.hibernate.dialect.MySQL57InnoDBDialect
  shardingsphere:
    props:
      sql.show: true 
    datasource:
      names: ds0,ds1
      ds0:  #ds0 配置
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/share0?autoReconnect=true&failOverReadOnly=false&createDatabaseIfNotExist=true&useSSL=false&useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8
        username: root
        password: 123456
      ds1:   #ds1 配置
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/share1?autoReconnect=true&failOverReadOnly=false&createDatabaseIfNotExist=true&useSSL=false&useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8
        username: root
        password: 123456
    sharding:  
      broadcast-tables: t_dict  #指定t_dict为广播表(公共表，每个库都有该表)
      binding-tables[0]: t_order, t_order_detail  #指定t_order和t_order_detail为绑定表，防止联查时，出现笛卡尔积查询
      default-database-strategy:
        # 使用默认分库策略(所有数据分库都用该字段，并且所有表都必须配置分表策略，所以该配置慎用)
        inline:
          sharding-column: order_type
          algorithm-expression: ds$->{order_type % 2}
      tables:
        t_order:
          actual-data-nodes: ds$->{0..1}.t_order_$->{0..1}  # 数据节点
          key-generator:
            column: id
            type: SNOWFLAKE
          # 分表策略(水平)
          table-strategy:
            inline:
              sharding-column: id   # 分表字段id
              algorithm-expression: t_order_$->{id % 2}  # 分表算法
        t_order_detail:
          actual-data-nodes: ds$->{0..1}.t_order_detail_$->{0..1}  # 数据节点
          key-generator:
            column: id
            type: SNOWFLAKE
          # 分表策略(水平)
          table-strategy:
            inline:
              sharding-column: order_id  # 分表字段
              algorithm-expression: t_order_detail_$->{order_id % 2}  # 分表算法

logging:
  level:  #日志级别控制
    jdbc: off  #日志最高级别，只打印sql及参数
    jdbc.sqltiming: info #记录sql执行的时间
    com:  #包名
      xwj: debug